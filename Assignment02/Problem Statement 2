** Analysis questions for part 2

In addition to your code and solution print-outs, you'll need to provide a nice write-up of your solution.  Your write-up should be professionally neat and must include:

- 1. A brief description of your solution approach/strategy.   Introduce how you factored the problem (major classes and/or functions) and what each of them does. You don't need to describe every little helper function, just walk us through an overview of how your code tackles the problem.
- 2. Analyze your heuristic function(s) that you developed for the A* search. Are they admissible? Are they consistent? Define each concept, analyze whether each h(n) you did meets that bar. With this in mind, can you guarantee that you A* searches guarantee optimal routes? If not, can show me a map in which your functions do NOT find the optimal route?
- 3. So what is the difference between the algorithms? In which situations does one work better than the others? Do some exploration to generate some data to answer these questions by creating at least two reasonably complex (>30 nodes) maps. Then do the following on each map, recording your stats every time:
  - (a) Select five different start-goal combinations, choosing them to be different from each other. Closer, farther, heavily connected, on the edge, in the middle. The idea is that you're trying to somehow get a spread of possible start-goal conditions.
  - (b) Now run each of the algos on the map, for each of the start-goal conditions. Record your stats for each run.
  - (c) Now, repeat (a) and (b), but with the following change: choose a start point...and then multiple goals. So no you have five conditions where you have multiple goals.
  - (d) Again, run all your algorithms/heuristics on each start-goals condition. Record your stats.
- Now analyze the data you generated. First show your raw data in one or two nice tables (one for each map analyzed). Then add some column/row statistics to compare, for each search type and start-goals combo the average of: goal path cost, goal path length, number of nodes explored, etc. What you are trying to do is to see if you can see some patterns. Does one type of search always do better? Or does it only tend to do better for certain situations (e.g., close-by goals vs distant goals). Or maybe things change when you have multiple goals vs. just one? If you did multiple A* heuristics, which worked better?
- Now let's bring this back to reality: describe a heuristic function that Google Maps might actually use to generate routes. What are the inputs? How does it calculate a score? Remember, this function gets called *every time* a new search node is generated! Discuss the compuational complexity of running your function...and speculate on ways that Google might make this manageable.
- Write up the results of your analysis, answering questions like the ones suggested above...and noting any other patterns you exposed with your exploration. Whatever you present as your conclusions, it must be supported by the data your produced!! Do NOT just dump a bunch of data...and then speculate freely without any reference to actual data!


** Part 2 write-up

- Cover sheet:  Name, course, assignment title, date
- Your write-up to the analysis questions above, neatly typed up, cleanly formatted. Make sure you clearly label each answers so that I know which question it is addressing.
- Printout of your program output running the [[https://www.cefns.nau.edu/~edo/Classes/CS470-570_WWW/Assignments/Prog2-RoadwarriorSearch/sampleRuns/10sample.html][10-node]] and [[https://www.cefns.nau.edu/~edo/Classes/CS470-570_WWW/Assignments/Prog2-RoadwarriorSearch/sampleRuns/30sample.html][30-node]]
  samples given above. For each one, run the first three expansion
  steps with VERBOSE mode on, to show development of your OPEN
  list. Then turn VERBOSE=off, and let the searches run to completion
  to show the final stats.
- Printouts of your program running the dynamically assigned
  searches. [[https://www.cefns.nau.edu/~edo/Classes/CS470-570_WWW/Assignments/Prog2-RoadwarriorSearch/Testing-Assignment-pt2.html][DESCRIPTION]], [[file:program2_tests2.py][TESTS]].
- Your richly commented and professionally presented code (may be be
  duplex printed).

ATTENTION: when you are showing runs of your searches, *you must
clearly label the printouts*!! Especially: you should carefully state
what input map you are running on! An excellent way to help me out
here is to attach a small snapshot of the graphical layout of the
map...makes it easy to see which map your are running! Extra cool is
if you've asked the visualizer to paintPath the final goal path found
by your search, so that it's showing in red on the map!
